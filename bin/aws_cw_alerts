#!/usr/bin/env python
# vi:autoindent:expandtab:shiftwidth=4:tabstop=4

import sys
import getopt
import os
import socket
import boto3

#import pprint

def simple_livestatus_query(lql):
    livestatus_unix_socket  = os.path.expanduser("~/tmp/run/live")
    s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    s.connect(livestatus_unix_socket)
    s.send(lql)
    s.shutdown(socket.SHUT_WR)
    response = ""
    while True:
        chunk = s.recv(4096)
        if not chunk:
            break
        response += chunk
    return response

def get_alarms(session, account):
    cloudwatch = session.client('cloudwatch')

    paginator = cloudwatch.get_paginator('describe_alarms')
    for response in paginator.paginate():
        #pprint.pprint(response)
        for i in response['MetricAlarms']:
            host_name = ".".join(filter(None, [i['Dimensions'][0]['Value'], i['Namespace'].replace('/', '_'), account]))
            piggy_name = simple_livestatus_query("GET hosts\nColumns: name\nFilter: alias = %s\n" % host_name).strip() or host_name
            print "<<<<%s>>>>" % piggy_name
            print "<<<local>>>"
            print "0 AWSCW/%s - %s - %s" % (i['AlarmName'].split('/', 1)[-1].strip().replace(' ', '_'), i['StateValue'], i['StateReason'])
            print "<<<<>>>>"

short_options = 'a:'
long_options  = [
    'accounts='
]

opt_accounts = []

try:
    opts, args = getopt.getopt(sys.argv[1:], short_options, long_options)
except getopt.GetoptError, err:
    sys.stderr.write("%s\n" % err)
    sys.exit(1)

for o,a in opts:
    if o in [ '-a', '--accounts' ]:
        opt_accounts = a.split(',')

if len(args) != 0:
    sys.exit(1)

session = boto3.Session()
if opt_accounts:
    for account in opt_accounts:
        sts = session.client('sts')
        assumed_role = sts.assume_role(RoleArn = "arn:aws:iam::%s:role/CheckMK" % account, RoleSessionName = "CheckMK")
        assumed_session = boto3.Session(
            aws_access_key_id = assumed_role['Credentials']['AccessKeyId'],
            aws_secret_access_key = assumed_role['Credentials']['SecretAccessKey'],
            aws_session_token = assumed_role['Credentials']['SessionToken']
        )
        get_alarms(assumed_session, account)
else:
    get_alarms(session, None)
